=========================
 Release notes for MGSim
=========================

This document describes major updates to MGSim.

Version 3.5.x (Development)
===========================

New features
------------

- An experimental DSL (domain-specific language) is introduced to
  automatically generate the definition of some components, to keep
  their initialization and serialization code in sync.

Changes since version 3.5
-------------------------

- Graphical output now uses SDL2, which incidentally enables multiple
  Display devices side-by-side.

- Minor SPARC and MIPS ISA emulation fixes.

Version 3.5, July 2015
======================

New features
------------

- New ``tinysim`` demo to exemplify the use of the MGSim framework for
  other projects than Microthreading research.

- New serialization framework to aid investigating internal component
  states. Some simulation state may even be modified via a new
  interactive command ``set``.

Changes since version 3.4
-------------------------

- The FPU model is now independent from the core model, and interfaces
  via ``IFPUClient``.

- Two variants of the MGSim framework are now compiled, one using a
  singleton Kernel instance and one where multiple Kernels can be used
  side-by-side (``*-dyn``). Using a singleton Kernel leads to 5-10%
  performance improvement.

- The configuration object is now reachable from the current Kernel
  instance (``GetConfig()``) and does not need to be passed as
  argument to all constructors any more.

- Multiple major stylistic code improvements that take advantage of
  the newer C++11 features.

- The Display device now works using a command queue which composes
  textures with arbitrary scaling and positioning. Textures may be of
  different bit depths. This enables multiple user programs to render
  output side by side without the need for synchronization.

Version 3.4, July 2013
======================

New features
------------

- New trace type ``memnet`` to report activity on the memory network.

- New configuration parameters ``--disable-mem-XXX`` to selectively
  exclude some memory systems from the build (to speed up compilation).

- The location of the configuration file can be overridden using the
  environment variable ``MGSIM_BASE_CONFIG``.

- Additional configuration files can be loaded by using command-line
  argument ``-I``.

Changes since version 3.3
-------------------------

- Rename the "COMA" memory models to "CDMA" (Cache Diffusion Memory
  Architecture) to reflect the reality of the memory protocol.

- The ancillary core registers and the MGSim control interface are now
  visible via the memory address space instead of special
  instructions, so as to simplify user code.

- Rename "Processor" to "DRISC" to pave the way for other core models.

- Separate the "connect" and "initialize" phases during instantiation
  of many components.

- Multiple fixes of the SPARC ISA implementation.

- Numerous Microthreading model tweaks.

Version 3.3, October 2012
=========================

New features
------------

- Preliminary support for the 32-bit MIPS  ISA.

- The configuration file supports sections; for example the following
  syntax::

     [CPU1]
     ICache:Associativity = 4
     DCache:Associativity = 8

  is equivalent to::

     CPU1.ICache:Associativity = 4
     CPU1.DCache:Associativity = 8

  The special section name ``[global]`` resets the
  prefix to empty.

- Configuration values can indirect through another configuration
  variable. For example::

     FPU_AddSubLatency = 3
     FPU*:Unit0Latency = $FPU_AddSubLatency
     FPU*:Unit1Latency = $FPU_AddSubLatency

- Each memory system can be statically disabled during configure
  (--enable/--disable); this helps save build time.

Changes since version 3.2
-------------------------

- MGSim now uses C++11 features and requires a C++11 compliant
  compiler. GNU C++ 4.7 and 4.8 are reported to work, so are Clang 3.1
  to 3.3.

- a memory-mapped I/O (MMIO) interface supersedes the special "print"
  instruction in MGSim's Processor model.

- The unit test suite was refactored to better support parallel build
  and skip irrelevant tests.

- Fix several bugs in the SPARC ISA implementation that would yield
  invalid instruction behavior.

- Fix a bug in the FlatCOMA memory model yielding livelocks and
  general inefficiencies.

- Fix a bug in the DDR interface, which could cause spurious errors
  under high request load.

- Use a separate load completion buffer so that the L1D cache line
  does not need to be locked during load completions.

- Various improvements to reporting and tracing facilities.

Version 3.2, November 2011
==========================

New features
------------

- New infrastructure to estimate the silicon area cost of
  components using the 3rd-party package CACTI. 

- New memory system "DirectDDR" where cores/L1 caches
  are directly connected to DDR channels.

- New memory system "FlatCOMA" where L2 caches and DDR channels are
  connected in a single ring.

Changes since version 3.1
-------------------------

- Fix a bug in the DDR simulation code, which caused DDR accesses to
  appear sequential (instead of pipelined), resulting in sub-optimal
  simulation performance.

- Improved the reporting of cache access statistics.

Version 3.1, May 2011
=====================

New features
------------

- Allow to connect cores to I/O devices. See CSA note [mgsim14] for
  details of the architecture; see the subdirectory ``doc`` of the
  simulator sources for details about simulated devices.

- Allow to specify a strategy for creating families, including
  automatic load balancing. See CSA note [mgsim12] for details.

Changes since version 3.0
-------------------------

- A new configuration format was implemented to allow configuring
  individual components. See CSA notes [mgsim16] and [mgsim17] for
  details.

- Various simulated hardware buffers were (unrealistically)
  unbounded. Bounds have been set for nearly all buffers. For now the
  family allocation queues are still unbounded, waiting for proper
  priority handling of suspending vs. non-suspending requests on the
  delegation network.

Version 3.0, March 2011
=======================

New features
------------

- Implements the "break" instruction to stop creating new threads in a
  family.

- Allow to monitor the simulation asynchronously during execution. See
  CSA note [mgsim9] for details.

Changes since version 2.0
-------------------------

- The architecture is modified to use a linear chain to link cores
  instead of multiple cluster rings.

- Jointly, the addressing scheme for delegations is modified: a place
  identifier now both identifies the target core and the size of the
  cluster for the created family. See CSA note [mgsim11] for details.

Version 2.0, April 2010
=======================

New features
------------

- Allow programs to introspect performance counters. See CSA note [sl8].

- Integrate the COMA memory simulation from Li Zhang.

Changes since version 1.0
-------------------------

- The simulation is now event-driven: cycles which do not have
  activity are skipped.

- The ISA is changed to avoid sharing registers between parent thread
  and child family.

Version 1.0, June 2009
======================

- Simulate multiple cores and configurable memory systems. Features:

  - dynamic family configuration in the ISA.

  - choice between MT-Alpha and MT-SPARC ISAs.

  - thread-local storage using address space partitioning.

  - shared FPU pipelnes between multiple cores.
